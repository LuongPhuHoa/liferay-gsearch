/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fi.soveltia.liferay.gsearch.click.tracking.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import fi.soveltia.liferay.gsearch.click.tracking.model.Clicks;
import fi.soveltia.liferay.gsearch.click.tracking.model.ClicksModel;
import fi.soveltia.liferay.gsearch.click.tracking.model.ClicksSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Clicks service. Represents a row in the &quot;GSearchClickTracking_Clicks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ClicksModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClicksImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClicksImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ClicksModelImpl
	extends BaseModelImpl<Clicks> implements ClicksModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a clicks model instance should use the <code>Clicks</code> interface instead.
	 */
	public static final String TABLE_NAME = "GSearchClickTracking_Clicks";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"clickId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"keywords", Types.VARCHAR}, {"entryClassPK", Types.BIGINT},
		{"clickCount", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clickId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("keywords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entryClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clickCount", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GSearchClickTracking_Clicks (uuid_ VARCHAR(75) null,clickId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,keywords VARCHAR(75) null,entryClassPK LONG,clickCount INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table GSearchClickTracking_Clicks";

	public static final String ORDER_BY_JPQL =
		" ORDER BY clicks.clickCount ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GSearchClickTracking_Clicks.clickCount ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long ENTRYCLASSPK_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long KEYWORDS_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long CLICKCOUNT_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Clicks toModel(ClicksSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Clicks model = new ClicksImpl();

		model.setUuid(soapModel.getUuid());
		model.setClickId(soapModel.getClickId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setKeywords(soapModel.getKeywords());
		model.setEntryClassPK(soapModel.getEntryClassPK());
		model.setClickCount(soapModel.getClickCount());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Clicks> toModels(ClicksSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Clicks> models = new ArrayList<Clicks>(soapModels.length);

		for (ClicksSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ClicksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clickId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClickId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clickId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Clicks.class;
	}

	@Override
	public String getModelClassName() {
		return Clicks.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Clicks, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Clicks, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Clicks, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Clicks)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Clicks, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Clicks, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Clicks)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Clicks, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Clicks, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Clicks>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Clicks.class.getClassLoader(), Clicks.class, ModelWrapper.class);

		try {
			Constructor<Clicks> constructor =
				(Constructor<Clicks>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Clicks, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Clicks, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Clicks, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Clicks, Object>>();
		Map<String, BiConsumer<Clicks, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Clicks, ?>>();

		attributeGetterFunctions.put("uuid", Clicks::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Clicks, String>)Clicks::setUuid);
		attributeGetterFunctions.put("clickId", Clicks::getClickId);
		attributeSetterBiConsumers.put(
			"clickId", (BiConsumer<Clicks, Long>)Clicks::setClickId);
		attributeGetterFunctions.put("groupId", Clicks::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Clicks, Long>)Clicks::setGroupId);
		attributeGetterFunctions.put("companyId", Clicks::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Clicks, Long>)Clicks::setCompanyId);
		attributeGetterFunctions.put("createDate", Clicks::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Clicks, Date>)Clicks::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Clicks::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Clicks, Date>)Clicks::setModifiedDate);
		attributeGetterFunctions.put("keywords", Clicks::getKeywords);
		attributeSetterBiConsumers.put(
			"keywords", (BiConsumer<Clicks, String>)Clicks::setKeywords);
		attributeGetterFunctions.put("entryClassPK", Clicks::getEntryClassPK);
		attributeSetterBiConsumers.put(
			"entryClassPK", (BiConsumer<Clicks, Long>)Clicks::setEntryClassPK);
		attributeGetterFunctions.put("clickCount", Clicks::getClickCount);
		attributeSetterBiConsumers.put(
			"clickCount", (BiConsumer<Clicks, Integer>)Clicks::setClickCount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getClickId() {
		return _clickId;
	}

	@Override
	public void setClickId(long clickId) {
		_clickId = clickId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getKeywords() {
		if (_keywords == null) {
			return "";
		}
		else {
			return _keywords;
		}
	}

	@Override
	public void setKeywords(String keywords) {
		_columnBitmask |= KEYWORDS_COLUMN_BITMASK;

		if (_originalKeywords == null) {
			_originalKeywords = _keywords;
		}

		_keywords = keywords;
	}

	public String getOriginalKeywords() {
		return GetterUtil.getString(_originalKeywords);
	}

	@JSON
	@Override
	public long getEntryClassPK() {
		return _entryClassPK;
	}

	@Override
	public void setEntryClassPK(long entryClassPK) {
		_columnBitmask |= ENTRYCLASSPK_COLUMN_BITMASK;

		if (!_setOriginalEntryClassPK) {
			_setOriginalEntryClassPK = true;

			_originalEntryClassPK = _entryClassPK;
		}

		_entryClassPK = entryClassPK;
	}

	public long getOriginalEntryClassPK() {
		return _originalEntryClassPK;
	}

	@JSON
	@Override
	public int getClickCount() {
		return _clickCount;
	}

	@Override
	public void setClickCount(int clickCount) {
		_columnBitmask = -1L;

		_clickCount = clickCount;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Clicks.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Clicks.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Clicks toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Clicks>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClicksImpl clicksImpl = new ClicksImpl();

		clicksImpl.setUuid(getUuid());
		clicksImpl.setClickId(getClickId());
		clicksImpl.setGroupId(getGroupId());
		clicksImpl.setCompanyId(getCompanyId());
		clicksImpl.setCreateDate(getCreateDate());
		clicksImpl.setModifiedDate(getModifiedDate());
		clicksImpl.setKeywords(getKeywords());
		clicksImpl.setEntryClassPK(getEntryClassPK());
		clicksImpl.setClickCount(getClickCount());

		clicksImpl.resetOriginalValues();

		return clicksImpl;
	}

	@Override
	public int compareTo(Clicks clicks) {
		int value = 0;

		if (getClickCount() < clicks.getClickCount()) {
			value = -1;
		}
		else if (getClickCount() > clicks.getClickCount()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Clicks)) {
			return false;
		}

		Clicks clicks = (Clicks)obj;

		long primaryKey = clicks.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ClicksModelImpl clicksModelImpl = this;

		clicksModelImpl._originalUuid = clicksModelImpl._uuid;

		clicksModelImpl._originalGroupId = clicksModelImpl._groupId;

		clicksModelImpl._setOriginalGroupId = false;

		clicksModelImpl._originalCompanyId = clicksModelImpl._companyId;

		clicksModelImpl._setOriginalCompanyId = false;

		clicksModelImpl._setModifiedDate = false;

		clicksModelImpl._originalKeywords = clicksModelImpl._keywords;

		clicksModelImpl._originalEntryClassPK = clicksModelImpl._entryClassPK;

		clicksModelImpl._setOriginalEntryClassPK = false;

		clicksModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Clicks> toCacheModel() {
		ClicksCacheModel clicksCacheModel = new ClicksCacheModel();

		clicksCacheModel.uuid = getUuid();

		String uuid = clicksCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			clicksCacheModel.uuid = null;
		}

		clicksCacheModel.clickId = getClickId();

		clicksCacheModel.groupId = getGroupId();

		clicksCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			clicksCacheModel.createDate = createDate.getTime();
		}
		else {
			clicksCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			clicksCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			clicksCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		clicksCacheModel.keywords = getKeywords();

		String keywords = clicksCacheModel.keywords;

		if ((keywords != null) && (keywords.length() == 0)) {
			clicksCacheModel.keywords = null;
		}

		clicksCacheModel.entryClassPK = getEntryClassPK();

		clicksCacheModel.clickCount = getClickCount();

		return clicksCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Clicks, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Clicks, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Clicks, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Clicks)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Clicks, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Clicks, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Clicks, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Clicks)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Clicks>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _clickId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _keywords;
	private String _originalKeywords;
	private long _entryClassPK;
	private long _originalEntryClassPK;
	private boolean _setOriginalEntryClassPK;
	private int _clickCount;
	private long _columnBitmask;
	private Clicks _escapedModel;

}